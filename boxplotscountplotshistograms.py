# -*- coding: utf-8 -*-
"""BoxplotsCountPlotsHistograms

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DNYOdEHnvr8-5Lo_dXQoFD04jrety_fL

---

#### 1. Import Modules

First import all the necessary modules to create DataFrame and required graphs mentioned as follows:

- `numpy`
- `pandas`
- `matplotlib.pyplot`
- `seaborn`
"""

# Import the modules.
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

"""---

#### 2. Load The Dataset

Load the credit card clients dataset. Here's the link: 

https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/uci-credit-card-fraud/UCI_Credit_Card.csv
"""

# Load the dataset.
# Dataset link: 'https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/uci-credit-card-fraud/UCI_Credit_Card.csv'
cc_client_csv = 'https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/uci-credit-card-fraud/UCI_Credit_Card.csv'
cc_client_df = pd.read_csv(cc_client_csv) 
cc_client_df.head()

"""Find out how many rows and columns are there in the dataset."""

# Number of rows and columns using the 'shape' function.
cc_client_df.shape

"""---

#### 3. Check For The Missing Values

Now, check whether the dataset contains any `NaN` or null or missing values.
"""

# Check for the missing values by using the 'sum()' function on top of the 'isnull()' function.
cc_client_df.isnull().sum()

"""**Q:** Are there any columns containing the missing values? If 'yes', name them.

**A:** No

---

### 4. Data Cleaning

The `EDUCATION`, and `MARRIAGE` columns contain irregular values. You need to replace them with the correct values.

---

#### 4.1 Education Qualification of Clients

The `EDUCATION` column must contain the following five different types of values:

- `1` denotes that a client graduated from a graduate school 

- `2` denotes that a client is a university graduate

- `3` denotes that a client is a high school graduate

- `4` denotes that a client graduated from some other institution

- `5` denotes that the graduation status of a client is unknown

If there are any other values in the `EDUCATION` column, replace them with `5`. Also, get the counts of each value.

Calculate the counts of each value in the `EDUCATION` column.
"""

# Counts of each value in the 'EDUCATION' column. 
cc_client_df['EDUCATION'].value_counts()

"""**Hint**: You can get the counts of each value in the 'EDUCATION' column by using the `value_counts()` function.

**Q:** What value(s) is/are contained in the `EDUCATION` column apart from the values `1` to `5`? And what will you do with them?

**A:** The values `0` and `6` are present in the column. Hence, they are the unwanted values. They need to be replaced with `5` because it covers all the other possible cases of unknown education qualifications. After the replacement, the final count of the `5` values should be `280 + 51 + 14 = 345`.
"""

# Replace the unwanted values in the 'EDUCATION' column. Ignore if there are none.
cc_client_df.loc[cc_client_df['EDUCATION'] == 0, 'EDUCATION'] = 5
cc_client_df.loc[cc_client_df['EDUCATION'] == 6, 'EDUCATION'] = 5
cc_client_df['EDUCATION'].value_counts()

"""**Hint**: You can replace the rows with `0` and `6` in the `Education` column by using the `loc[]` function.

**Syntax**: `df.loc[df['column_name'] == old_value, 'EDUCATION'] = new_value`

Calculate the percentage of each value in the `EDUCATION` column.
"""

# Percentage of each value in the 'EDUCATION' column.
cc_client_df['EDUCATION'].value_counts() * 100 / cc_client_df.shape[0]

"""**Hint**: You can get the total number of counts of each value in the column by using the `value_counts()` function. Then you can calculate the percentage of each value by multiplying the total number of counts of each value with 100 and dividing the resultant value by the total number of rows in the DataFrame (`df.shape[0]`).

**Q:** What percent of clients were university graduates?

**A:** About 47% clients were university graduates.

Create a count plot for the `EDUCATION` column.
"""

# Count plot for the 'EDUCATION' column using the 'countplot()' function of 'seaborn' module.
sns.countplot(x='EDUCATION', data=cc_client_df)
plt.show()

"""---

#### 4.2 The `info()` Function

You may require to check the data-type of every column. So, instead of applying the `dtype` keyword one-by-one for each column, you can use the `info()` function to check the data-types of all the columns at once. It also tells you the total number of rows and columns in a DataFrame. Here's the syntax:

**Syntax:** `data_frame.info()`

where `data_frame` is a variable storing some Pandas DataFrame.

**Note:** This function is applicable only to Pandas DataFrame.
"""

# Check the data-types of all the columns using the 'info()' function.
cc_client_df.info()

"""As you can see, the data-types of all the columns are now available to you at once.

---

#### 4.3 Marital Status of Clients

The `MARRIAGE` column the contain the following three different types of values:

 - `1` denotes that a client is married
 
 - `2` denotes that a client is single
 
 - `3` denotes all other possible marital statuses such as divorced, widowed etc.

If there are any other values, then they should be replaced with `3` because it covers all the other possible cases of marital status of a client.

Calculate the counts of each value in the `MARRIAGE` column.
"""

# Counts of each value in the 'MARRIAGE' column.
cc_client_df['MARRIAGE'].value_counts()

"""**Q:** What value(s) is/are contained in the `MARRIAGE` column apart from the values `1, 2` and `3`? What are their counts?

**A:** The other type of value is `0`. It's count is `54`. It must be replaced with `3`. After replacement, the final count of `3` should be `323 + 54 = 377`.

 
"""

# Replace the unwanted values ('0') in the 'MARRIAGE' column with '3'. Ignore if there are none.
cc_client_df.loc[cc_client_df['MARRIAGE'] == 0, 'MARRIAGE'] = 3
cc_client_df['MARRIAGE'].value_counts()

"""Calculate the percentage of the values in the `MARRIAGE` column."""

# Percentage of the values in the 'MARRIAGE' column.
cc_client_df['MARRIAGE'].value_counts() * 100 / cc_client_df.shape[0]

"""**Q:** What  of clients were married?

**A:** About 45% of the clients were married.

Create a count plot for the `MARRIAGE` column.
"""

# Count plot for the 'MARRIAGE' column.
sns.countplot(x='MARRIAGE', data=cc_client_df)
plt.show()

"""---

### 5. Box Plots & Histograms

The final task is to create box plots and histograms for the columns containing continuous numeric values. 

**Note:** All the histograms must have grids.

#### 5.1 Box Plot & Histogram For The `AGE` Column

Create a box plot for the `AGE` column.
"""

# Box plot for the 'AGE' column using the 'boxplot()' function.
plt.figure(figsize=(20, 1.5))
sns.boxplot(x='AGE', data=cc_client_df)
plt.show()

"""**Q:** From the box plot for the `AGE` column, what is the approx median age of a credit card holder?

**A:** 34 approx.

Create a histogram for the `AGE` column.
"""

# Histogram for the 'AGE' column using 'distplot()' function from the 'seaborn' module.
plt.figure(figsize=(20, 5))
sns.distplot(cc_client_df['AGE'], kde=False)
plt.grid(True)
plt.show()

"""**Q:** Is there some peculiar pattern in the `AGE` histogram?

**A:** Yes, beyond 25, as the age decreases, the number of credit card clients also decrease but 5 peaks appear in between.

---

#### 5.2 Box Plot & Histogram For The `LIMIT_BAL` Column

Create a box plot for the `LIMIT_BAL` column.
"""

# Box plot for the LIMIT_BAL column.
plt.figure(figsize=(20, 1.5))
sns.boxplot(x='LIMIT_BAL', data=cc_client_df)
plt.show()

"""Create a histogram for the `LIMIT_BAL` column using a function from the `seaborn` module."""

# Histogram for the 'LIMIT_BAL' column using 'distplot()' function from the 'seaborn' module.
plt.figure(figsize=(20, 5))
sns.distplot(cc_client_df['LIMIT_BAL'], kde=False)
plt.grid(True)
plt.show()

"""Create a histogram (having 50 bins) for the `LIMIT_BAL` column using a function from the `matplotlib.pyplot` module."""

# Histogram (having 50 bins) for the 'LIMIT_BAL' column using 'hist()' function from the 'matplotlib.pyplot' module.
plt.figure(figsize=(20, 5))
plt.hist(cc_client_df['LIMIT_BAL'], bins=50)
plt.grid(True)
plt.show()

"""---"""