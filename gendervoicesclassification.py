# -*- coding: utf-8 -*-
"""Copy of AT_CapstoneProject5_GenderVoicesClassification_QuestionCopy_v0.2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jXSNF4eTFhMgthVp_Z5sJbPvBWuCrP4O

# Project 5: Gender Voices Classification

### Overview

In this project, you are provided with a dataset which contains some statistical information about the audio frequencies of different male and female voices. Based on the information provided, you have to find out which voice belongs to which gender using the `RandomForestClassifier` algorithm.

The data description is provided below for the dataset.

<img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/project-4/gender_voice_dataset_attributes.png' width=600>

*Dataset credits: https://www.mldata.io/dataset-details/gender_voice/*

Please note that

1. In the `label` column, `0` denotes the male class and `1` denotes the female class.

2. You are not required to know the meaning of all the other attributes in the dataset. You just need to deploy a prediction model with these attributes as the feature variables and the `label` column as the target variable. 

You can get the datasets from the following links:

1. Train dataset 
  
  https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/project-4/gender-voice-train.csv

2. Test dataset 

  https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/project-4/gender-voice-test.csv

---

### Project Requirements

1. Create a pandas DataFrame for the train and test datasets.

2. Display the first five rows of both the training and test DataFrames.

3. Display the last five rows of both the training and test DataFrames.

4. Find the number of rows and columns in the train and test DataFrames.

5. Check for the missing values in the train and test DataFrames.

6. Count the number of `male` and `female` classes in the train DataFrame. 

7. Separate the feature variables, i.e., `x_train` and `x_test` from both the DataFrames.

8. Separate the target variable, i.e., `y_train` and `y_test` from both the DataFrames.

9. Apply the `RandomForestClassifier` machine learning model to predict the `males` and `female` classes in the test DataFrame, i.e, `x_test`.

10. Print the confusion matrix and the classification report to evaluate your prediction model. Also, based on the confusion matrix, precision, recall and f1-score values, report whether the prediction model deployed by you is making accurate predictions or not.

---

#### Getting Started

Follow the steps described below to solve the project:

1. Click on the link provided below to open the Colab file for this project.
   
   https://colab.research.google.com/drive/1eP0L1-vjjYnZSHtiEQ1EL0UFQ3NiyA65?usp=sharing

2. Create the duplicate copy of the Colab file. Here are the steps to create the duplicate copy:

    - Click on the **File** menu. A new drop-down list will appear.

      <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/0_file_menu.png' width=500>

    - Click on the **Save a copy in Drive** option. A duplicate copy will get created. It will open up in the new tab on your web browser.

      <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/1_create_colab_duplicate_copy.png' width=500>

     - After creating the duplicate copy of the notebook, please rename it in the **YYYY-MM-DD_StudentName_CapstoneProject5** format. 

3. Now, write your code in the prescribed code cells.

---

#### 1. Create The DataFrames

Create the Pandas DataFrames for both the training and test datasets.
"""

# Create the DataFrames for both the train and test datasets and store them in the 'train_df' and 'test_df' variables respectively.
import pandas as pd
import numpy as np


train_df = pd.read_csv("https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/project-4/gender-voice-train.csv")
test_df  = pd.read_csv("https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/project-4/gender-voice-test.csv")

"""---

#### 2. Display First Five Rows

Display the first five rows of both the `train_df` and `test_df` DataFrames.
"""

# Display the first 5 rows of the 'train_df' DataFrame.
train_df.head()

# Display the first 5 rows of the 'test_df' DataFrame.
test_df.head()

"""---

#### 3. Display Last Five Rows

Display the last five rows of both the `train_df` and `test_df` DataFrames.
"""

# Display the last 5 rows of the 'train_df' DataFrame.
train_df.tail()

# Display the last 5 rows of the 'test_df' DataFrame.
test_df.tail()

"""---

#### 4. Rows & Columns In Train DataFrame

Find the number of rows and columns in both the `train_df` and `test_df` DataFrames.
"""

# Print the number of rows and columns in both the DataFrames.
print("Test :",test_df.shape)
print("Train :",train_df.shape)

"""---

#### 5. Check For Missing Values 

Check whether any of the columns in both the `train_df` and `test_df` DataFrames has any missing value.
"""

# Check for the missing values in the 'train_df' DataFrame.
train_df.isnull()

# Check for the missing values in the 'test_df' DataFrame.
test_df.isnull()

"""---

#### 6. Count The `male` & `female` Classes

Find out the number of `male` and `female` values in both the `train_df` and `test_df` DataFrames.
"""

# Print the count of the 'male' and 'female' classes in the 'train_df' DataFrame.
print(train_df["label"].value_counts())
print(" 0 denotes the male class and 1 denotes the female class")

# Print the count of the 'male' and 'female' classes in the 'test_df' DataFrame.
print(test_df["label"].value_counts())
print(" 0 denotes the male class and 1 denotes the female class")

"""---

#### 7. Feature Variables Extraction

Get the feature variables, i.e., `x_train` and `x_test` from both the `train_df` and `test_df` DataFrames respectively. Then, display the first 5 rows of `x_train` and `x_test` DataFrames.
"""

# Get the feature variables from the 'train_df' DataFrame.
x_train = train_df.iloc[:,1:]

# Display the first 5 rows of the 'x_train' DataFrame.
x_train.head()

# Get the feature variables from the 'test_df' DataFrame.
x_test = test_df.iloc[:,1:]
# Display the first 5 rows of the 'x_test' DataFrame.
x_test.head()

"""---

#### 8. Target Variable Extraction

Get the target variables, i.e., `y_train` and `y_test` from both the `train_df` and `test_df` DataFrames respectively. Then, display the first 5 rows of `y_train` and `y_test` Pandas series.
"""

# Get the target variable from the 'train_df' DataFrame.
y_train = train_df.iloc[:,0]
# Display the first 5 rows of the 'y_train' Pandas series.
y_train.head()

# Get the target variable from the 'test_df' DataFrame.
y_test = test_df.iloc[:,0]
# Display the first 5 rows of the 'y_test' Pandas series.
y_test.head()

"""---

#### 9. Building A Random Forest Classifier Model
"""

# Build a Random Forest Classifier model.
# Import the 'RandomForestClassifier' module.
from sklearn.ensemble import RandomForestClassifier
# Import the confusion_matrix and classification_report modules.
from sklearn.metrics import confusion_matrix,classification_report

# Predict the target variable based on the feature variables of the test DataFrame.
rf_clf = RandomForestClassifier(n_jobs=-1,n_estimators=50)
rf_clf.fit(x_test,y_test)
y_pred = rf_clf.predict(x_test)
y_pred = pd.Series(y_pred)
y_pred

"""---

#### 10. Confusion Matrix & Classification Report

Print the confusion matrix and classification report to evaluate the model. Interpret and report the results obtained from the confusion matrix and the classification report.
"""

# Print the confusion matrix to see the number of TN, FN, TP and FP values.
confusion_matrix(y_test,y_pred)

# Print the precision, recall and f1-score values for both the male and female classes.
print(classification_report(y_test,y_pred))

"""**Write your interpretation of the results here.**

- Interpretation 1: 

- Interpretation 2:

- Interpretation 3:

  $\dots$

- Interpretation N

---

### Submitting the Project

Follow the steps described below to submit the project.

1. After finishing the project, click on the **Share** button on the top right corner of the notebook. A new dialog box will appear.

  <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/2_share_button.png' width=500>

2. In the dialog box, click on the **Copy link** button.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/3_copy_link.png' width=500>


3. The link of the duplicate copy (named as **YYYY-MM-DD_StudentName_CapstoneProject5**) of the notebook will get copied 

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/4_copy_link_confirmation.png' width=500>

4. Go to your dashboard and click on the **My Projects** option.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/5_student_dashboard.png' width=800>

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/6_my_projects.png' width=800>

5. Click on the **View Project** button for the project you want to submit.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/7_view_project.png' width=800>

6. Click on the **Submit Project Here** button.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/8_submit_project.png' width=800>

7. Paste the link to the project file named as **YYYY-MM-DD_StudentName_CapstoneProject5** in the URL box and then click on the **Submit** button.

   <img src='https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/images/project-share-images/9_enter_project_url.png' width=800>

---
"""